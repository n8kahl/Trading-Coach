openapi: 3.1.0
info:
  title: Trading Coach Backend API
  version: "2.2.1"
  description: |
    Fancy Trader endpoints powering GPT integrations.
    Session-aware payloads clamp data when markets are closed (frozen).
servers:
  - url: https://trading-coach-production.up.railway.app
    description: Production

paths:
  /gpt/plan:
    post:
      summary: Return a single trade plan for a symbol
      operationId: postGptPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanRequest'
      responses:
        '200':
          description: Structured plan response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
        '400': { description: Invalid input }
        '404': { description: No plan available }
        '502': { description: Upstream market data unavailable }

  /gpt/scan:
    post:
      summary: Rank trade setups across a universe
      operationId: postGptScan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanRequest'
      responses:
        '200':
          description: Ranked scan candidates (paged 50 per request)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanPage'
        '400': { description: Invalid input or empty universe }
        '502': { description: Upstream market data unavailable }

  /gpt/chart-url:
    post:
      summary: Build canonical /tv link for a plan
      operationId: postGptChartUrl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartUrlRequest'
      responses:
        '200':
          description: Canonical chart URL
          content:
            application/json:
              schema:
                type: object
                required: [url]
                properties:
                  url:
                    type: string
                    format: uri
                    example: >-
                      https://trading-coach-production.up.railway.app/tv?center_time=latest&direction=long&ema=9,20,50&entry=251.4&focus=plan&interval=5m&plan_id=TSLA-2025-10-15T153000-1&plan_version=1&range=1d&scale_plan=auto&stop=249.8&symbol=TSLA&theme=dark&tp=253.0,254.2,255.6&view=1D
        '400': { description: Validation error (unknown keys or bad types) }

  /api/v1/gpt/chart-layers:
    get:
      summary: Return persisted overlays for a plan
      operationId: getGptChartLayers
      parameters:
        - in: query
          name: plan_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Levels/zones/annotations for plotting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanLayers'
        '404': { description: Not found }
        '409': { description: as_of mismatch }

components:
  schemas:

    # ---------- Requests ----------
    PlanRequest:
      type: object
      required: [symbol]
      properties:
        symbol:
          type: string
          description: Ticker symbol to plan
          example: TSLA
        style:
          type: string
          nullable: true
          description: Optional style hint (scalp, intraday, swing, leaps)
          example: intraday
        plan_id:
          type: string
          nullable: true
          description: Force plan refresh for a specific plan id
        simulate_open:
          type: boolean
          default: false
          description: >-
            When true, treats closed sessions as simulated-live for strategy evaluation.
            Also accepts the `X-Simulate-Open: 1` header.

    ScanFilters:
      type: object
      properties:
        min_rvol:
          type: number
          minimum: 0
          nullable: true
        exclude:
          type: array
          items:
            type: string
        min_liquidity_rank:
          type: integer
          minimum: 1
          nullable: true

    ScanRequest:
      type: object
      required: [universe, style]
      properties:
        universe:
          oneOf:
            - type: string
              description: A universe token (will be expanded to tickers server-side)
              example: FT-TopLiquidity
            - type: array
              items: { type: string }
              description: Explicit tickers
              example: ["AAPL","MSFT","NVDA"]
        style:
          type: string
          enum: [scalp, intraday, swing, leaps]
        limit:
          type: integer
          default: 20
          minimum: 1
          maximum: 100
        asof_policy:
          type: string
          enum: [live, frozen, live_or_lkg]
          default: live_or_lkg
        filters:
          $ref: '#/components/schemas/ScanFilters'
        cursor:
          type: string
          nullable: true
        simulate_open:
          type: boolean
          default: false
          description: >-
            When true, evaluates the scan as if the market were open even if the
            current session is closed. Also accepts the `X-Simulate-Open: 1` header.

    ChartUrlRequest:
      type: object
      description: >
        The only accepted fields to build a canonical /tv link. All other
        keys (e.g., session_* / market_* / levels) are ignored or rejected.
      required:
        - symbol
        - interval
        - direction
        - entry
        - stop
        - tp
        - ema
        - focus
        - center_time
        - scale_plan
        - view
        - range
        - theme
        - plan_id
        - plan_version
      properties:
        symbol: { type: string, example: TSLA }
        interval: { type: string, example: 5m }
        direction: { type: string, enum: [long, short] }
        entry: { type: number, format: double, example: 251.4 }
        stop: { type: number, format: double, example: 249.8 }
        tp:
          type: array
          description: Target prices in display order
          items: { type: number, format: double }
          example: [253.0, 254.2, 255.6]
        ema:
          type: array
          description: EMA periods included on the chart
          items: { type: integer, minimum: 1 }
          example: [9, 20, 50]
        focus: { type: string, enum: [plan], example: plan }
        center_time: { type: string, enum: [latest], example: latest }
        scale_plan: { type: string, enum: [auto], example: auto }
        view: { type: string, example: 1D }
        range: { type: string, example: 1d }
        theme: { type: string, example: dark }
        plan_id: { type: string, example: TSLA-2025-10-15T153000-1 }
        plan_version: { type: integer, minimum: 1, example: 1 }

    # ---------- Scan ----------
    ScanCandidate:
      type: object
      required: [symbol, score, reasons]
      properties:
        symbol: { type: string }
        score: { type: number, format: double }
        reasons:
          type: array
          items: { type: string }
        plan_id: { type: string, nullable: true }
        entry: { type: number, format: double, nullable: true }
        stop: { type: number, format: double, nullable: true }
        tps:
          type: array
          items: { type: number, format: double }
        rr_t1: { type: number, format: double, nullable: true }
        confidence: { type: number, format: double, nullable: true }
        chart_url: { type: string, format: uri, nullable: true }
        entry_distance_pct: { type: number, format: double, nullable: true }
        entry_distance_atr: { type: number, format: double, nullable: true }
        bars_to_trigger: { type: number, format: double, nullable: true }
        actionable_soon: { type: boolean, nullable: true }

    ScanPage:
      type: object
      required: [as_of, planning_context, meta, candidates, data_quality]
      properties:
        as_of: { type: string, format: date-time }
        planning_context: { type: string, enum: [live, frozen] }
        banner: { type: string, nullable: true }
        meta:
          type: object
          description: Additional metadata (includes `simulated_open` when simulated live mode is used).
        candidates:
          type: array
          items: { $ref: '#/components/schemas/ScanCandidate' }
        data_quality: { type: object }
        next_cursor: { type: string, nullable: true }

    # ---------- Plans ----------
    Contract:
      type: object
      required: [symbol]
      properties:
        symbol: { type: string }
        delta:  { type: number }
        oi:     { type: integer }
        spread: { type: number, description: "fraction e.g. 0.05 = 5%" }
        ivp:    { type: number, nullable: true }
        expiry: { type: string, nullable: true }

    PlanLayers:
      type: object
      required: [as_of, meta]
      properties:
        as_of: { type: string, format: date-time }
        levels:
          type: array
          items:
            type: object
            properties:
              price: { type: number, format: double }
              label: { type: string }
              kind:  { type: string }
        zones:
          type: array
          items:
            type: object
            properties:
              top: { type: number, format: double }
              bottom: { type: number, format: double }
              label: { type: string }
        annotations:
          type: array
          items:
            type: object
            properties:
              time: { type: string }
              text: { type: string }
        meta:
          type: object
          properties:
            symbol: { type: string }
            interval: { type: string }
            precision: { type: integer }

    LevelUsage:
      type: object
      properties:
        role: { type: string }
        label: { type: string, nullable: true }
        price: { type: number, format: double }
        distance: { type: number, format: double, nullable: true }
        source: { type: string, nullable: true }

    KeyLevelsUsed:
      type: object
      properties:
        session:
          type: array
          items: { $ref: '#/components/schemas/LevelUsage' }
        structural:
          type: array
          items: { $ref: '#/components/schemas/LevelUsage' }

    RiskBlock:
      type: object
      properties:
        risk_points: { type: number, format: double, nullable: true }
        risk_percent: { type: number, format: double, nullable: true }
        reward_to_target:
          type: object
          additionalProperties: { type: number, format: double }
        atr_stop_multiple: { type: number, format: double, nullable: true }
        atr_value: { type: number, format: double, nullable: true }
        expected_move: { type: number, format: double, nullable: true }
        expected_move_fraction:
          type: object
          additionalProperties: { type: number, format: double }
        runner_trail_multiple: { type: number, format: double, nullable: true }

    ExecutionRules:
      type: object
      properties:
        trigger: { type: string, nullable: true }
        invalidation: { type: string, nullable: true }
        scale: { type: string, nullable: true }
        reload: { type: string, nullable: true }

    TargetMeta:
      type: object
      properties:
        label: { type: string }
        prob_touch: { type: number, format: double }
        distance: { type: number, format: double }
        optional: { type: boolean }
        em_fraction: { type: number, format: double }
        em_basis: { type: number, format: double }
        mfe_quantile: { type: string }
        mfe_ratio: { type: number, format: double }

    PlanResponse:
      type: object
      required: [plan_id, version, trade_detail, idea_url, symbol]
      properties:
        plan_id: { type: string }
        version: { type: integer, minimum: 1 }
        trade_detail: { type: string, format: uri }
        idea_url: { type: string, format: uri }
        warnings:
          type: array
          items: { type: string }
        planning_context: { type: string, enum: [live, frozen] }
        symbol: { type: string }
        style: { type: string, nullable: true }
        bias: { type: string, nullable: true }
        setup: { type: string, nullable: true }
        entry: { type: number, format: double, nullable: true }
        stop: { type: number, format: double, nullable: true }
        targets:
          type: array
          items: { type: number, format: double }
        target_meta:
          type: array
          items: { $ref: '#/components/schemas/TargetMeta' }
        rr_to_t1: { type: number, format: double, nullable: true }
        confidence: { type: number, format: double, nullable: true }
        confidence_factors:
          type: array
          items: { type: string }
        notes: { type: string, nullable: true }
        relevant_levels:
          type: object
          additionalProperties: { type: number, format: double }
        expected_move_basis: { type: string, nullable: true }
        sentiment: { type: object, nullable: true }
        events: { $ref: '#/components/schemas/EventsBlock' }
        earnings: { $ref: '#/components/schemas/EarningsBlock' }
        charts_params: { type: object }
        chart_url: { type: string, format: uri, nullable: true }
        strategy_id: { type: string, nullable: true }
        description: { type: string, nullable: true }
        score: { type: number, format: double, nullable: true }
        plan: { type: object, nullable: true }
        structured_plan: { $ref: '#/components/schemas/StructuredPlan' }
        target_profile: { $ref: '#/components/schemas/TargetProfile' }
        charts:
          type: object
          nullable: true
          description: Chart payload (includes `live=1` / `last_update` when live or simulated-live contexts apply).
        key_levels:
          type: object
          additionalProperties: { type: number, format: double }
        key_levels_used:
          $ref: '#/components/schemas/KeyLevelsUsed'
          nullable: true
        market_snapshot: { type: object, nullable: true }
        features: { type: object, nullable: true }
        options: { type: object, nullable: true }
        calc_notes: { type: object, nullable: true }
        htf:
          type: object
          properties:
            bias: { type: string }
            snapped_targets:
              type: array
              items: { type: string }
        decimals: { type: integer, nullable: true }
        data_quality:
          type: object
          properties:
            series_present: { type: boolean }
            iv_present: { type: boolean }
            earnings_present: { type: boolean }
        debug: { type: object, nullable: true }
        runner: { type: object, nullable: true }
        updated_from_version: { type: integer, nullable: true }
        update_reason: { type: string, nullable: true }
        market: { type: object, nullable: true }
        data: { type: object, nullable: true }
        session_state: { $ref: '#/components/schemas/SessionState' }
        # New required outputs for parity with prompt
        confluence:
          type: array
          items: { type: string }
        tp_reasons:
          type: object
          additionalProperties: { type: string }
          description: String reasons keyed by target price (formatted)
        options_contracts:
          type: array
          items: { $ref: '#/components/schemas/Contract' }
        options_note: { type: string, nullable: true }
        plan_layers: { $ref: '#/components/schemas/PlanLayers' }
        risk_block:
          $ref: '#/components/schemas/RiskBlock'
          nullable: true
        execution_rules:
          $ref: '#/components/schemas/ExecutionRules'
          nullable: true
        meta:
          type: object
          nullable: true
          description: Additional metadata flags (e.g., `simulated_open`).

    StructuredPlan:
      type: object
      required: [plan_id, symbol, entry, stop, targets]
      properties:
        plan_id: { type: string }
        symbol: { type: string }
        style: { type: string, nullable: true }
        direction: { type: string, nullable: true }
        entry:
          type: object
          required: [type, level]
          properties:
            type: { type: string }
            level: { type: number, format: double }
        invalid: { type: boolean }
        stop: { type: number, format: double }
        targets:
          type: array
          items: { type: number, format: double }
        probabilities:
          type: object
          additionalProperties: { type: number, format: double }
        runner: { type: object, nullable: true }
        confluence:
          type: array
          items: { type: string }
        confidence: { type: number, format: double, nullable: true }
        rationale: { type: string, nullable: true }
        options: { type: object, nullable: true }
        em_used: { type: number, format: double, nullable: true }
        atr_used: { type: number, format: double, nullable: true }
        style_horizon_applied: { type: string, nullable: true }
        chart_url: { type: string, format: uri, nullable: true }
        as_of: { type: string, format: date-time, nullable: true }
        snap_trace:
          type: array
          items: { type: object }
        meta:
          type: array
          items: { type: object }
        key_levels_used:
          $ref: '#/components/schemas/KeyLevelsUsed'
          nullable: true
        mtf_confluence:
          type: array
          items: { type: string }
          nullable: true
        risk_block:
          $ref: '#/components/schemas/RiskBlock'
          nullable: true
        execution_rules:
          $ref: '#/components/schemas/ExecutionRules'
          nullable: true

    TargetProfile:
      type: object
      required: [entry, stop, targets, probabilities, snap_trace, meta, warnings]
      properties:
        entry: { type: number, format: double }
        stop: { type: number, format: double }
        targets:
          type: array
          items: { type: number, format: double }
        probabilities:
          type: object
          additionalProperties: { type: number, format: double }
        em_used: { type: number, format: double, nullable: true }
        atr_used: { type: number, format: double, nullable: true }
        snap_trace:
          type: array
          items: { type: object }
        meta:
          type: array
          items: { type: object }
        warnings:
          type: array
          items: { type: string }
        runner: { type: object, nullable: true }
        bias: { type: string, nullable: true }
        style: { type: string, nullable: true }
        expected_move: { type: number, format: double, nullable: true }

    EventsBlock:
      type: object
      nullable: true
      properties:
        next_fomc_minutes: { type: integer, nullable: true }
        next_cpi_minutes: { type: integer, nullable: true }
        next_nfp_minutes: { type: integer, nullable: true }
        within_event_window: { type: boolean, nullable: true }
        label: { type: string, nullable: true }

    EarningsBlock:
      type: object
      nullable: true
      properties:
        next_earnings_at: { type: string, format: date-time, nullable: true }
        dte_to_earnings: { type: integer, nullable: true }
        pre_or_post: { type: string, nullable: true }
        earnings_flag: { type: string, nullable: true }
        expected_move_pct: { type: number, format: double, nullable: true }

    SessionState:
      type: object
      nullable: true
      properties:
        status: { type: string, enum: [open, closed] }
        as_of: { type: string, format: date-time }
        next_open: { type: string, format: date-time, nullable: true }
        tz: { type: string, default: America/New_York }
        banner: { type: string }
